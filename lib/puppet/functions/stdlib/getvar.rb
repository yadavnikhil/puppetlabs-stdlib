# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Lookup a variable in a remote namespace.
#
#    For example:
#
#        $foo = getvar('site::data::foo')
#        # Equivalent to $foo = $site::data::foo
#
#    This is useful if the namespace itself is stored in a string:
#
#        $datalocation = 'site::data'
#        $bar = getvar("${datalocation}::bar")
#        # Equivalent to $bar = $site::data::bar
#
#
Puppet::Functions.create_function(:'stdlib::getvar') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    unless args.length == 1
      raise Puppet::ParseError, ("getvar(): wrong number of arguments (#{args.length}; must be 1)")
    end

    begin
      catch(:undefined_variable) do
        self.lookupvar("#{args[0]}")
      end
    rescue Puppet::ParseError # Eat the exception if strict_variables = true is set
    end

  
  end
end
