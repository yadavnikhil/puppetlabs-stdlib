# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# Test whether a given class or definition is defined
require 'puppet/parser/functions'

# ---- original file header ----
#
# @summary
#   Takes a resource reference and an optional hash of attributes.
#
#Returns true if a resource with the specified attributes has already been added
#to the catalog, and false otherwise.
#
#    user { 'dan':
#      ensure => present,
#    }
#
#    if ! defined_with_params(User[dan], {'ensure' => 'present' }) {
#      user { 'dan': ensure => present, }
#    }
#
#
Puppet::Functions.create_function(:'stdlib::defined_with_params') do
  # @param vals
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :vals
  end


  def default_impl(*vals)
    
  reference, params = vals
  raise(ArgumentError, 'Must specify a reference') unless reference
  if (! params) || params == ''
    params = {}
  end
  ret = false
  if resource = findresource(reference.to_s)
    matches = params.collect do |key, value|
      resource[key] == value
    end
    ret = params.empty? || !matches.include?(false)
  end
  Puppet.debug("Resource #{reference} was not determined to be defined")
  ret

  end
end
