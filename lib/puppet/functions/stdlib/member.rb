# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# member.rb
#

# TODO(Krzysztof Wilczynski): We need to add support for regular expression ...
# TODO(Krzysztof Wilczynski): Support for strings and hashes too ...

# ---- original file header ----
#
# @summary
#   This function determines if a variable is a member of an array.
#The variable can be a string, fixnum, or array.
#
#*Examples:*
#
#    member(['a','b'], 'b')
#
#Would return: true
#
#    member(['a', 'b', 'c'], ['a', 'b'])
#
#would return: true
#
#    member(['a','b'], 'c')
#
#Would return: false
#
#    member(['a', 'b', 'c'], ['d', 'b'])
#
#would return: false
#
#
Puppet::Functions.create_function(:'stdlib::member') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "member(): Wrong number of arguments " +
      "given (#{arguments.size} for 2)") if arguments.size < 2

    array = arguments[0]

    unless array.is_a?(Array)
      raise(Puppet::ParseError, 'member(): Requires array to work with')
    end

    unless arguments[1].is_a? String or arguments[1].is_a? Fixnum or arguments[1].is_a? Array
      raise(Puppet::ParseError, 'member(): Item to search for must be a string, fixnum, or array')
    end

    if arguments[1].is_a? String or arguments[1].is_a? Fixnum
      item = [arguments[1]]
    else
      item = arguments[1]
    end


    raise(Puppet::ParseError, 'member(): You must provide item ' +
      'to search for within array given') if item.respond_to?('empty?') && item.empty?

    result = (item - array).empty?

    return result
  
  end
end
