# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# delete.rb
#

# TODO(Krzysztof Wilczynski): We need to add support for regular expression ...

# ---- original file header ----
#
# @summary
#   Deletes all instances of a given element from an array, substring from a
#string, or key from a hash.
#
#*Examples:*
#
#    delete(['a','b','c','b'], 'b')
#    Would return: ['a','c']
#
#    delete({'a'=>1,'b'=>2,'c'=>3}, 'b')
#    Would return: {'a'=>1,'c'=>3}
#
#    delete({'a'=>1,'b'=>2,'c'=>3}, ['b','c'])
#    Would return: {'a'=>1}
#
#    delete('abracadabra', 'bra')
#    Would return: 'acada'
#
#
Puppet::Functions.create_function(:'stdlib::delete') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    if (arguments.size != 2) then
      raise(Puppet::ParseError, "delete(): Wrong number of arguments "+
                                  "given #{arguments.size} for 2.")
    end

    collection = arguments[0].dup
    Array(arguments[1]).each do |item|
      case collection
        when Array, Hash
          collection.delete item
        when String
          collection.gsub! item, ''
        else
          raise(TypeError, "delete(): First argument must be an Array, " +
                             "String, or Hash. Given an argument of class #{collection.class}.")
      end
    end
    collection
  
  end
end
