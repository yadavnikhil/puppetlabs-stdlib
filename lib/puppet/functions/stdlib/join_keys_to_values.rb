# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# join.rb
#

# ---- original file header ----
#
# @summary
#   This function joins each key of a hash to that key's corresponding value with a
#separator. Keys and values are cast to strings. The return value is an array in
#which each element is one joined key/value pair.
#
#*Examples:*
#
#    join_keys_to_values({'a'=>1,'b'=>2}, " is ")
#
#Would result in: ["a is 1","b is 2"]
#
#
Puppet::Functions.create_function(:'stdlib::join_keys_to_values') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    # Validate the number of arguments.
    if arguments.size != 2
      raise(Puppet::ParseError, "join_keys_to_values(): Takes exactly two " +
            "arguments, but #{arguments.size} given.")
    end

    # Validate the first argument.
    hash = arguments[0]
    if not hash.is_a?(Hash)
      raise(TypeError, "join_keys_to_values(): The first argument must be a " +
            "hash, but a #{hash.class} was given.")
    end

    # Validate the second argument.
    separator = arguments[1]
    if not separator.is_a?(String)
      raise(TypeError, "join_keys_to_values(): The second argument must be a " +
            "string, but a #{separator.class} was given.")
    end

    # Join the keys to their values.
    hash.map do |k,v|
      String(k) + separator + String(v)
    end

  
  end
end
