# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# fqdn_rotate.rb
#

# ---- original file header ----
#
# @summary
#   Usage: `fqdn_rotate(VALUE, [SEED])`. VALUE is required and
#  must be an array or a string. SEED is optional and may be any number
#  or string.
#
#  Rotates VALUE a random number of times, combining the `$fqdn` fact and
#  the value of SEED for repeatable randomness. (That is, each node will
#  get a different random rotation from this function, but a given node's
#  result will be the same every time unless its hostname changes.) Adding
#  a SEED can be useful if you need more than one unrelated rotation.
#
Puppet::Functions.create_function(:'stdlib::fqdn_rotate') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "fqdn_rotate(): Wrong number of arguments " +
      "given (#{args.size} for 1)") if args.size < 1

    value = args.shift
    require 'digest/md5'

    unless value.is_a?(Array) || value.is_a?(String)
      raise(Puppet::ParseError, 'fqdn_rotate(): Requires either ' +
        'array or string to work with')
    end

    result = value.clone

    string = value.is_a?(String) ? true : false

    # Check whether it makes sense to rotate ...
    return result if result.size <= 1

    # We turn any string value into an array to be able to rotate ...
    result = string ? result.split('') : result

    elements = result.size

    seed = Digest::MD5.hexdigest([lookupvar('::fqdn'),args].join(':')).hex
    # deterministic_rand() was added in Puppet 3.2.0; reimplement if necessary
    if Puppet::Util.respond_to?(:deterministic_rand)
      offset = Puppet::Util.deterministic_rand(seed, elements).to_i
    else
      if defined?(Random) == 'constant' && Random.class == Class
        offset = Random.new(seed).rand(elements)
      else
        old_seed = srand(seed)
        offset = rand(elements)
        srand(old_seed)
      end
    end
    offset.times {
       result.push result.shift
    }

    result = string ? result.join : result

    return result

  end
end
